# Generated by Django 4.0.4 on 2023-02-20 15:37

from django.db import migrations, models
import django.db.models.deletion


def populate_dimension_metadata(apps, schema_editor):
    emo_dim_codename = []
    for i in range(12):
        emo_dim_codename.append("DIM_EMO{}".format(i))
    
    other_dim_codename = []
    for i in range(12):
        other_dim_codename.append("DIM_OTH{}".format(i))

    offensive_dim_codename = []
    for i in range(19):
        offensive_dim_codename.append("DIM_OFF{}".format(i))

    humor_dim_codename = []
    for i in range(26):
        humor_dim_codename.append("DIM_HUM{}".format(i))

    codenames = emo_dim_codename + other_dim_codename + offensive_dim_codename + humor_dim_codename
    meta_slider_values = {
        "slider_min": 0,
        "slider_max": 10,
        "slider_step": 1,
        "with_checkbox": 0
    }
    meta_slider_values_with_cb = {
        "slider_min": 0,
        "slider_max": 10,
        "slider_step": 1,
        "with_checkbox": 1
    }
    meta_checkbox_sc_values = {
        "is_multiple_answers": 0,
        "min_answer_number": 0,
        "max_answer_number": 1,
        "options": ''
    }

    meta_checkbox_mc_values_1 = {
        "is_multiple_answers": 1,
        "min_answer_number": 0,
        "max_answer_number": 1,
        "options": 'Płeć; Narodowość; Przekonania religijne; Rasę, kolor skóry, wygląd; Wiek; Czyn, działanie; Orientację seksualną; Poglądy polityczne, partie; Inne, np. grupy społeczne, zawodowe'
    }

    meta_checkbox_mc_values_2 = {
        "is_multiple_answers": 1,
        "min_answer_number": 0,
        "max_answer_number": 1,
        "options": "Mowa nienawiści; Odczłowieczenie; Nawoływanie do przemocy; Nawoływanie do ludobójstwa; Niesprawiedliwe uogólnianie, stereotypy; Lekceważenie; Upokorzenie; Inne"
    }

    meta_checkbox_mc_values_3 = {
        "is_multiple_answers": 1,
        "min_answer_number": 0,
        "max_answer_number": 1,
        "options": 'Płeć; Narodowość; Przekonania religijne; Rasę, kolor skóry, wygląd; Wiek; Czyn, działanie; Orientację seksualną; Poglądy polityczne, partie; Inne, np. grupy społeczne, zawodowe'
    }

    meta_checkbox_mc_values_4 = {
        "is_multiple_answers": 1,
        "min_answer_number": 0,
        "max_answer_number": 1,
        "options": "Czarny humor; Ironię; Sarkazm; Dwuznaczność; Grę słów; Seksualność; Humor fekalny (o kupie :-) ); Brzmienie słów; Wyolbrzymienie; Niecenzuralne słowa; Kontrast; Ma charakter dowcipu, kawału, żartu; Absurd; Humor sytuacyjny; Humor patetyczny"
    }
    meta_values = [meta_slider_values]*12 + [meta_slider_values_with_cb]*10 + [meta_checkbox_sc_values]*2 + [meta_slider_values]*2 + [meta_checkbox_mc_values_1]*9 + [meta_checkbox_mc_values_2]*8 + [meta_slider_values]*2 + [meta_checkbox_mc_values_3]*9 + [meta_checkbox_mc_values_4]*15    
    dimensions = list(range(1, 70))
    meta_required_field = [1]*12 + [0]*12 + [1]*2 + [0]*17 + [1]*2 + [0]*24
    meta_readonly_field = [1]*69

    DimensionMetadata = apps.get_model('projects', 'DimensionMetaData')
    Dimensions = apps.get_model('projects', 'DynamicDimension')
    for i in range(len(codenames)):
        object = DimensionMetadata(codename=codenames[i], value=meta_values[i], required=meta_required_field[i], readonly=meta_readonly_field[i], dimension=Dimensions(dimensions[i]))
        object.save()


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0009_dynamicannotationproject_init_database'),
    ]
    operations = [
        migrations.CreateModel(
            name='DimensionMetaData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dimension', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.DynamicDimension')),
                ('codename', models.CharField(max_length=10)),
                ('value', models.JSONField(default=dict)),
                ('required', models.BooleanField(default=False)),
                ('readonly', models.BooleanField(default=False)),
            ],
        ),
        migrations.RunPython(populate_dimension_metadata),
    ]
